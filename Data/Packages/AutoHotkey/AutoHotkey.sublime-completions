// Archivo de Autocompletar
// Sintaxis:
//     {"trigger": "Nombre Elemento\tDescripción", "contents": "Funcion ${1:Parametro 1}, ${2:Parametro 2}"},
// Caracteres especiales:
//     \n  = Nueva línea
//     \t  = TAB
// Referencias:
//     http://docs.sublimetext.info/en/latest/reference/completions.html
//     http://docs.sublimetext.info/en/latest/extensibility/syntaxdefs.html#scopes-and-scope-selectors
{
    "scope": "source.ahk - string", // '- string' deshabilita el auto-competado cuando se está escribiendo dentro de una cadena.
    "completions":
    [
        // ############################################################################################################################################
        // # Personalizados                                                                                                                           #
        // ############################################################################################################################################
        {"trigger": "lambda\t() => expression", "contents": "(${1:params}) => ${2:expr}"},    // https://autohotkey.com/boards/viewtopic.php?f=37&t=2120&p=208322#p208322
        {"trigger": "IsWindow\t(WindowId)", "contents": "DllCall(\"User32.dll\\IsWindow\", \"Ptr\", ${1:WindowId})"},
        {"trigger": "BGR2RGB\t(BGR)", "contents": "($1 & 255) << 16 | ($1 & 65280) | ($1 >> 16)"},
        {"trigger": "RGB2BGR\t(RGB)", "contents": "($1 & 255) << 16) | ((($1 >> 8) & 255) << 8) | ($1 >> 16)"},
        {"trigger": "DestroyMenu\t(Handle)", "contents": "DllCall(\"User32.dll\\DestroyMenu\", \"Ptr\", ${1:Handle})"},
        {"trigger": "StrLeft\t(String, Length)", "contents": "SubStr(${1:String}, 1, ${2:Length})"},
        {"trigger": "StrRight\t(String, Length)", "contents": "SubStr(${1:String}, -${2:Length})"},
        {"trigger": "StrTrimLeft\t(String, Length)", "contents": "SubStr(${1:String}, ${2:Length}+1)"},
        {"trigger": "StrTrimRight\t(String, Length)", "contents": "SubStr(${1:String}, 1, -${2:Length})"},
        {"trigger": "PI\t3.14159..", "contents": "ACos(-1)"},
        {"trigger": "RtlAdjustPrivilege\t(PrivilegeN, Enable?)", "contents": "DllCall(\"Ntdll.dll\\RtlAdjustPrivilege\", \"UInt\", ${1:PrivilegeN}, \"UChar\", ${2:TRUE}, \"UChar\", FALSE, \"IntP\", t)"},


        // ############################################################################################################################################
        // # List of Keys, Mouse Buttons, and Joystick Controls                                                                                       #
        // ############################################################################################################################################
        // "XXXXXXXXXXXXXXXXXXXXXXX",


        // ############################################################################################################################################
        // # Environment                                                                                                                              #
        // ############################################################################################################################################
        {"trigger": "ClipWait\t([SecondsToWait, 1])", "contents": "ClipWait($1)"},
        {"trigger": "EnvGet\t(EnvVarName)", "contents": "EnvGet(${1:EnvVarName})"},
        {"trigger": "EnvSet\t(EnvVar, Value)", "contents": "EnvSet(${1:EnvVar}, ${2:Value})"},
        {"trigger": "OnClipboardChange\t(Func [, AddRemove])", "contents": "OnClipboardChange($1)"},
        {"trigger": "SysGet\t(Sub-command)", "contents": "SysGet(${1:Subcommand})"},


        // ############################################################################################################################################
        // # External Libraries                                                                                                                       #
        // ############################################################################################################################################
        {"trigger": "DllCall\t(\"[DllFile\\]Function\" [, \"Type1\", \"Arg1\", \"Cdecl ReturnType\"])", "contents": "DllCall(${1:\"Kernel32.dll\\Sleep\"})"},
        {"trigger": "NumGet\t(Address [, Type := \"UPtr\"])", "contents": "NumGet(${1:Address}, \"${2:UPtr}\")"},
        {"trigger": "NumPut\t(Number, Address [, Type := \"UPtr\"])", "contents": "NumPut(${1:Number}, ${2:Address}, \"${3:UPtr}\")"},
        {"trigger": "StrPut\t(String, Address [, Length] [, Encoding])", "contents": "StrPut(${1:String}, ${2:Address}, ${3:\"UTF-16\"})"},
        {"trigger": "StrGet\t(Address [, Length] [, Encoding])", "contents": "StrGet(${1:Address}, ${2:\"UTF-16\"})"},
        {"trigger": "CallbackCreate\t(\"FunctionName\" [, Options = \"\", ParamCount = Function.MinParams])", "contents": "CallbackCreate(\"${1:FunctionName}\")"},
        {"trigger": "CallbackFree\t(Address)", "contents": "CallbackFree(${1:Address})"},
        {"trigger": "VarSetCapacity\t(UnquotedVarName [, RequestedCapacity, FillByte])", "contents": "VarSetCapacity(${1:UnquotedVarName})"},
        {"trigger": "ComObjActive\t(CLSID)", "contents": "ComObjActive($1)"},
        {"trigger": "ComObjArray\t(VarType, Count1 [, Count2, ... Count8])", "contents": "ComObjArray($1)"},
        {"trigger": "ComObjConnect\t(ComObject [, Prefix])", "contents": "ComObjConnect($1)"},
        {"trigger": "ComObjCreate\t(CLSID [, IID])", "contents": "ComObjCreate($1)"},
        {"trigger": "ComObject\t(VarType, Value [, Flags]) | (DispPtr)", "contents": "ComObject($1)"},
        {"trigger": "ComObjError\t(TRUE/FALSE)", "contents": "ComObjError(${1:FALSE})"},
        {"trigger": "ComObjFlags\t(ComObject [, NewFlags, Mask])", "contents": "ComObjFlags($1)"},
        {"trigger": "ComObjGet\t(Name)", "contents": "ComObjGet(\"$1\")"},
        {"trigger": "ComObjQuery\t(ComObject, [SID,] IID)", "contents": "ComObjQuery($1)"},
        {"trigger": "ComObjType\t(ComObject [, \"Name|IID|Class|CLSID\"])", "contents": "ComObjType($1)"},
        {"trigger": "ComObjValue\t(ComObject)", "contents": "ComObjValue($1)"},
        {"trigger": "GlobalFree\t(pMem)", "contents": "DllCall(\"Kernel32.dll\\GlobalFree\", \"UPtr\", ${1:pMem}, \"UPtr\")"},
        {"trigger": "GlobalAlloc\t(Flags, Bytes)", "contents": "DllCall(\"Kernel32.dll\\GlobalAlloc\", \"UInt\", ${2:0x42}, \"UPtr\", ${1:Bytes}, \"UPtr\")"},
        {"trigger": "GlobalLock\t(pMem)", "contents": "DllCall(\"Kernel32.dll\\GlobalLock\", \"UPtr\", ${1:pMem}, \"UPtr\")"},
        {"trigger": "GlobalUnlock\t(pMem)", "contents": "DllCall(\"Kernel32.dll\\GlobalUnlock\", \"UPtr\", ${1:pLock}, \"UPtr\")"},
        {"trigger": "CloseHandle\t(Handle)", "contents": "DllCall(\"Kernel32.dll\\CloseHandle\", \"Ptr\", ${1:Handle})"},
        {"trigger": "FreeLibrary\t(hModule)", "contents": "DllCall(\"Kernel32.dll\\FreeLibrary\", \"Ptr\", ${1:hModule})"},
        {"trigger": "LoadLibraryEx\t(DllName,, Flags)", "contents": "DllCall(\"Kernel32.dll\\LoadLibraryEx\", \"Str\", \"${1:DllName}\", \"UInt\", 0, \"UInt\", 0x2, \"Ptr\")"},
        {"trigger": "CoTaskMemFree\t(pMem)", "contents": "DllCall(\"Ole32.dll\\CoTaskMemFree\", \"UPtr\", ${1:pMem})"},


        // ############################################################################################################################################
        // # File, Directory and Disk                                                                                                                #
        // ############################################################################################################################################
        {"trigger": "DirCopy\t(Source, Dest [, Flag])", "contents": "DirCopy($1)"},
        {"trigger": "DirCreate\t(DirName)", "contents": "DirCreate($1)"},
        {"trigger": "DirDelete\t(DirName[, Recurse?])", "contents": "DirDelete($1)"},
        {"trigger": "DirExist\t(FilePattern)", "contents": "DirExist($1)"},
        {"trigger": "DirMove\t(Source, Dest [, Flag])", "contents": "DirMove($1)"},
        {"trigger": "DriveSetLabel\t(Drive [, NewLabel])", "contents": "DriveSetLabel($1)"},
        {"trigger": "DriveLock\t(Drive)", "contents": "DriveLock($1)"},
        {"trigger": "DriveUnlock\t(Drive)", "contents": "DriveUnlock($1)"},
        {"trigger": "DriveEject\t([Drive, Retract := false])", "contents": "DriveEject($1)"},
        {"trigger": "DriveGetList\t([Type])", "contents": "DriveGetList($1)"},
        {"trigger": "DriveGetCapacity\t(Path)", "contents": "DriveGetCapacity($1)"},
        {"trigger": "DriveGetSpaceFree\t(Path)", "contents": "DriveGetSpaceFree($1)"},
        {"trigger": "DriveGetFilesystem\t(Drive)", "contents": "DriveGetFilesystem($1)"},
        {"trigger": "DriveGetLabel\t(Drive)", "contents": "DriveGetLabel($1)"},
        {"trigger": "DriveGetSerial\t(Drive)", "contents": "DriveGetSerial($1)"},
        {"trigger": "DriveGetType\t(Path)", "contents": "DriveGetType($1)"},
        {"trigger": "DriveGetStatus\t(Path)", "contents": "DriveGetStatus($1)"},
        {"trigger": "DriveGetStatusCD\t([Drive])", "contents": "DriveGetStatusCD($1)"},
        {"trigger": "FileAppend\t(Text [, Filename, Options])", "contents": "FileAppend($1)"},
        {"trigger": "FileCopy\t(SourcePattern, DestPattern [, Flag])", "contents": "FileCopy(${1:SourcePattern}, ${2:DestPattern})"},
        {"trigger": "FileCreateShortcut\t(Target, LinkFile [, WDir, Args, Desc, IconF, ShortcutKey, IconN, RunState])", "contents": "FileCreateShortcut($1)"},
        {"trigger": "FileDelete\t(FilePattern)", "contents": "FileDelete($1)"},
        {"trigger": "FileEncoding\t([[Encoding]])", "contents": "FileEncoding($1)"},
        {"trigger": "FileExist\t(FilePattern)", "contents": "FileExist($1)"},
        {"trigger": "FileInstall\t(Source, Dest [, Flag])", "contents": "FileInstall ${1:Source}, ${2:Dest}"},
        {"trigger": "FileGetAttrib\t(Filename)", "contents": "FileExist(${1:Filename})"},
        {"trigger": "FileGetShortcut\t(LinkFile [, OutTarget, OutDir, OutArgs, OutDesc, OutIcon, OutIconN, OutRunState])", "contents": "FileGetShortcut($1)"},
        {"trigger": "FileGetSize\t([Filename, Units])", "contents": "FileGetSize($1)"},
        {"trigger": "FileGetTime\t([Filename, WhichTime])", "contents": "FileGetTime($1)"},
        {"trigger": "FileGetVersion\t([Filename])", "contents": "FileGetVersion(${1:Filename})"},
        {"trigger": "FileMove\t(SourcePattern, DestPattern [, Flag])", "contents": "FileMove(${1:SourcePattern}, ${2:DestPattern})"},
        {"trigger": "FileOpen\t(Filename, Flags [, Encoding])", "contents": "FileOpen($1, \"r\")"},
        {"trigger": "FileRead\t(Filename [, Options])", "contents": "FileRead($1)"},
        {"trigger": "FileRecycle\t(FilePattern)", "contents": "FileRecycle($1)"},
        {"trigger": "FileRecycleEmpty\t([DriveLetter])", "contents": "FileRecycleEmpty"},
        {"trigger": "FileSetAttrib\t(Attributes [, FilePattern, Mode])", "contents": "FileSetAttrib(\"N\", $1)"},
        {"trigger": "FileSetTime\t([YYYYMMDDHH24MISS, FilePattern, WhichTime, Mode])", "contents": "FileSetTime($1)"},
        {"trigger": "IniDelete\t(Filename, Section [, Key])", "contents": "IniDelete(${1:Filename}, ${2:Section})"},
        {"trigger": "IniRead\t((Filename, Section, Key [, Default]))", "contents": "IniRead(${1:Filename})"},
        {"trigger": "IniWrite\t(Value, Filename, Section, Key)", "contents": "IniWrite(${1:Value}, ${2:Filename}, ${3:Section}, ${4:Key})"},
        {"trigger": "SplitPath\t(Path [, OutFName, OutDir, OutExt, OutNNE, OutDrive])", "contents": "SplitPath(${1:Path}, OutFileName, OutDir, OutExtension, OutNameNoExt, ${2:OutDrive})"},
        {"trigger": "SetWorkingDir\t(DirName)", "contents": "SetWorkingDir(${1:DirName})"},
        {"trigger": "Loop Files\t(FilePattern [, Mode])", "contents": "Loop Files, ${1:FilePattern}"},
        {"trigger": "Loop Read\t(InputFile [, OutputFile])", "contents": "Loop Read, ${1:InputFile}"},


        // ############################################################################################################################################
        // # Flow Of Control                                                                                                                          #
        // ############################################################################################################################################
        {"trigger": "Sleep\t(DelayInMilliseconds)", "contents": "Sleep(${1:DelayInMilliseconds})"},
        {"trigger": "Suspend\t(0(OFF)|1(ON)|-1(Toggle))", "contents": "Suspend($1)"},
        {"trigger": "Tan\t(Number)", "contents": "Tan($1)"},
        {"trigger": "Thread\t(\"NoTimers|Priority|Interrupt\" [, false|n|Duration, LineCount])", "contents": "Thread(\"$1\")"},
        {"trigger": "Throw\t[Expression]", "contents": "Throw Exception(\"${1:Message}\", \"${2:What}\", \"${3:Extra}\")"},
        {"trigger": "Try\tStatement", "contents": "Try"},
        {"trigger": "Until\t(Expression)", "contents": "Until (${1:Expression})"},
        {"trigger": "While\t(Expression)", "contents": "While (${1:Expression})"},
        {"trigger": "Break\t[LoopLabel]", "contents": "Break"},
        {"trigger": "Catch\t[OutputVar]", "contents": "Catch"},
        {"trigger": "Continue\t[LoopLabel|NestingLevel]", "contents": "Continue"},
        {"trigger": "Loop\t([Count])", "contents": "Loop"},
        //{"trigger": "Loop Until", "contents": "Loop\n\t;$1\nUntil (Expression)"},
        {"trigger": "OnExit\t(Func [, AddRemove])", "contents": "OnExit(${1:Func})"},
        {"trigger": "OnExit_Function\t(ExitReason, ExitCode)", "contents": "Script_OnExit(ExitReason, ExitCode)\n{\n\t$1\n}"},
        {"trigger": "OnError\t(Func [, AddRemove])", "contents": "OnError(${1:Func})"},
        {"trigger": "Pause\t([-1|true|false])", "contents": "Pause(${1:true})"},
        {"trigger": "Reload", "contents": "Reload"},
        {"trigger": "Critical\t([\"Off\"|N])", "contents": "Critical"},
        {"trigger": "Return\t([Expression])", "contents": "Return"},
        {"trigger": "SetTimer\t([[Callback, Period|\"On|Off|Delete\", Priority])", "contents": "SetTimer(${1:Callback}, 1000)"},
        {"trigger": "Else", "contents": "Else"},
        //{"trigger": "Else If\t(expression)", "contents": "Else If (${1:expression})"},
        {"trigger": "Exit\t([ExitCode])", "contents": "Exit"},
        {"trigger": "ExitApp\t([ExitCode])", "contents": "ExitApp"},
        {"trigger": "Finally\tStatement", "contents": "Finally"},
        {"trigger": "For\tKey [, Value] in Expression", "contents": "For Each, Value in ${1:Expression}"},
        {"trigger": "Switch-case\t[SwitchValue]", "contents": "Switch ${1:SwitchValue}\n{\n\tcase ${2:CaseValue1}: ${3:Statements1}\n}"},
        {"trigger": "Gosub\tLabel", "contents": "Gosub ${1:Label}"},
        {"trigger": "Goto\tLabel", "contents": "Goto ${1:Label}"},
        {"trigger": "If\t(expression)", "contents": "If (${1:expression})"},
        {"trigger": "Global", "contents": "Global"},
        {"trigger": "Static", "contents": "Static"},
        {"trigger": "Local", "contents": "Local"},
        {"trigger": "AND", "contents": "AND"},
        {"trigger": "OR", "contents": "OR"},
        {"trigger": "ByRef\tVarName", "contents": "ByRef ${1:VarName}"},


        // ############################################################################################################################################
        // # Graphical User Interfaces                                                                                                                #
        // ############################################################################################################################################
        {"trigger": "AddText\t([Options, Text])", "contents": "AddText($1)"},
        {"trigger": "AddEdit\t([Options, Text])", "contents": "AddEdit($1)"},
        {"trigger": "AddUpDown\t([Options, Number])", "contents": "AddUpDown($1)"},
        {"trigger": "AddPic\t([Options, FileName|Handle])", "contents": "AddPic($1)"},
        {"trigger": "AddButton\t([Options, Label])", "contents": "AddButton($1)"},
        {"trigger": "AddCheckbox\t([Options, Label])", "contents": "AddCheckbox($1)"},
        {"trigger": "AddRadio\t([Options, Label])", "contents": "AddRadio($1)"},
        {"trigger": "AddDDL\t([Options, Items])", "contents": "AddDDL($1)"},
        {"trigger": "AddComboBox\t([Options, Items])", "contents": "AddComboBox($1)"},
        {"trigger": "AddListBox\t([Options, List])", "contents": "AddListBox($1)"},
        {"trigger": "AddListView\t([Options, ColumnTitle])", "contents": "AddListView($1)"},
        {"trigger": "AddTreeView\t([Options])", "contents": "AddTreeView($1)"},
        {"trigger": "AddLink\t([Options, Text])", "contents": "AddLink($1)"},
        {"trigger": "AddHotkey\t([Options, Hotkey])", "contents": "AddHotkey($1)"},
        {"trigger": "AddDateTime\t([Options, Format])", "contents": "AddDateTime($1)"},
        {"trigger": "AddMonthCal\t([Options, Format])", "contents": "AddMonthCal($1)"},
        {"trigger": "AddSlider\t([Options, Number])", "contents": "AddSlider($1)"},
        {"trigger": "AddProgress\t([Options, Number])", "contents": "AddProgress($1)"},
        {"trigger": "AddGroupBox\t([Options, Label])", "contents": "AddGroupBox($1)"},
        {"trigger": "AddTab3\t([Options, Tabs])", "contents": "AddTab3($1)"},
        {"trigger": "AddStatusBar\t([Options, Text])", "contents": "AddStatusBar($1)"},
        {"trigger": "AddActiveX\t([Options, ActiveX])", "contents": "AddActiveX($1)"},
        {"trigger": "AddCustom\t([Options])", "contents": "AddCustom($1)"},
        {"trigger": "AddComboBoxEx\t([Options])", "contents": "AddCustom(\"ClassComboBoxEx32$1\")"},
        {"trigger": "OnEvent\t(EventName, Callback [, AddRemove := 1])", "contents": "OnEvent(\"${1:EventName}\", ${2:Callback})"},

        {"trigger": "StatusBarGetText\t([PartN, WinTitle, WinText])", "contents": "StatusBarGetText(${1:PartN}, WinTitle)"},
        {"trigger": "StatusBarWait\t([BarText, Seconds, PartN, WinTitle,, Interval])", "contents": "StatusBarWait(${1:BarText},, PartN, WinTitle)"},
        {"trigger": "DirSelect\t([StartingFolder, Options, Prompt])", "contents": "DirSelect($1)"},
        {"trigger": "FileSelect\t([Options, RootDir\\Filename, Prompt, Filter])", "contents": "FileSelect(3)"},
        {"trigger": "GuiCreate\t([Options, Title := A_ScriptName, EventObj])", "contents": "GuiCreate($1)"},
        {"trigger": "GuiCtrlFromHwnd\t(Hwnd)", "contents": "GuiCtrlFromHwnd($1)"},
        {"trigger": "GuiFromHwnd\t(Hwnd [, RecurseParent := false])", "contents": "GuiFromHwnd($1)"},
        {"trigger": "InputBox\t([Text, Title, Options, Default])", "contents": "InputBox($1)"},
        {"trigger": "LoadPicture\t(Filename [, Options, ByRef ImageType])", "contents": "LoadPicture(${1:FileName})"},
        {"trigger": "MenuCreate\tCreates a Menu object", "contents": "MenuCreate()"},
        {"trigger": "MenuBarCreate\tCreates a MenuBar object", "contents": "MenuBarCreate()"},
        {"trigger": "TraySetIcon\t([FileName, IconNumber, Freeze])", "contents": "TraySetIcon($1)"},
        {"trigger": "MenuFromHandle\t(Handle)", "contents": "MenuFromHandle(${1:Handle})"},
        {"trigger": "MenuGetHandle\t(MenuName)", "contents": "MenuGetHandle(\"${1:MenuName}\")"},
        {"trigger": "MenuGetName\t(Handle)", "contents": "MenuGetName($1)"},
        {"trigger": "OnMessage\t(MsgNumber [, Function, MaxThreads])", "contents": "OnMessage(${1:MsgNumber})"},
        {"trigger": "OnMessage_Function\t(wParam, lParam, Message, hWnd)", "contents": "Script_Msg(wParam, lParam, Message, hWnd)\n{\n\t$1\n}"},
        {"trigger": "OnMessage_Unregister\t(MsgNumber, Function, 0)", "contents": "OnMessage(${1:MsgNumber}, Function, 0)"},
        {"trigger": "MsgBox\t([Text, Title, Options])", "contents": "MsgBox($1)$2"},
        {"trigger": "msgbox\t([Text, Title, Options])", "contents": "MsgBox($1)$2"},
        {"trigger": "ToolTip\t([Text, X, Y, WhichToolTip])", "contents": "ToolTip($1)"},
        {"trigger": "TrayTip\t([Text, Title, Options])", "contents": "TrayTip($1)"},
        {"trigger": "ControlAddItem\t(String [, Control, WinTitle])", "contents": "ControlAddItem($1)"},
        {"trigger": "ControlChoose\t(N [, Control, WinTitle])", "contents": "ControlChoose($1)"},
        {"trigger": "ControlChooseString\t(String [, Control, WinTitle])", "contents": "ControlChooseString($1)"},
        {"trigger": "ControlDeleteItem\t(N [, Control, WinTitle])", "contents": "ControlDeleteItem($1)"},
        {"trigger": "ControlEditPaste\t(String [, Control, WinTitle])", "contents": "ControlEditPaste($1)"},
        {"trigger": "ControlFindItem\t(String [, Control, WinTitle])", "contents": "ControlFindItem($1)"},
        {"trigger": "ControlFocus\t([Control, WinTitle])", "contents": "ControlFocus($1)"},
        {"trigger": "ControlGetChecked\t([Control, WinTitle])", "contents": "ControlGetChecked($1)"},
        {"trigger": "ControlGetChoice\t([Control, WinTitle])", "contents": "ControlGetChoice($1)"},
        {"trigger": "ControlGetCurrentCol\t([Control, WinTitle])", "contents": "ControlGetCurrentCol($1)"},
        {"trigger": "ControlGetCurrentLine\t([Control, WinTitle])", "contents": "ControlGetCurrentLine($1)"},
        {"trigger": "ControlGetEnabled\t([Control, WinTitle])", "contents": "ControlGetEnabled($1)"},
        {"trigger": "ControlGetFocus\t([WinTitle])", "contents": "ControlGetFocus($1)"},
        {"trigger": "ControlGetHwnd\t([Control, WinTitle])", "contents": "ControlGetHwnd($1)"},
        {"trigger": "ControlGetLine\t(N [, Control, WinTitle])", "contents": "ControlGetLine($1)"},
        {"trigger": "ControlGetLineCount\t([Control, WinTitle])", "contents": "ControlGetLineCount($1)"},
        {"trigger": "ControlGetList\t([Options, Control, WinTitle])", "contents": "ControlGetList($1)"},
        {"trigger": "ControlGetPos\t([X, Y, Width, Height, Control, WinTitle])", "contents": "ControlGetPos($1)"},
        {"trigger": "ControlGetSelected", "contents": "ControlGetSelected($1)"},
        {"trigger": "ControlGetStyle\t([Control, WinTitle])", "contents": "ControlGetStyle($1)"},
        {"trigger": "ControlGetExStyle\t([Control, WinTitle])", "contents": "ControlGetExStyle($1)"},
        {"trigger": "ControlGetTab\t([Control, WinTitle])", "contents": "ControlGetTab($1)"},
        {"trigger": "ControlGetText\t([Control, WinTitle])", "contents": "ControlGetText($1)"},
        {"trigger": "ControlGetVisible\t([Control, WinTitle])", "contents": "ControlGetVisible($1)"},
        {"trigger": "ControlHide\t([Control, WinTitle])", "contents": "ControlHide($1)"},
        {"trigger": "ControlHideDropDown\t([Control, WinTitle])", "contents": "ControlHideDropDown($1)"},
        {"trigger": "ControlMove\t([X, Y, Width, Height, Control, WinTitle])", "contents": "ControlMove($1)"},
        {"trigger": "ControlSetChecked\t(Value [, Control, WinTitle])", "contents": "ControlSetChecked($1)"},
        {"trigger": "ControlSetEnabled\t(Value [, Control, WinTitle])", "contents": "ControlSetEnabled($1)"},
        {"trigger": "ControlSetStyle\t(Value [, Control, WinTitle])", "contents": "ControlSetStyle($1)"},
        {"trigger": "ControlSetExStyle\t(Value [, Control, WinTitle])", "contents": "ControlSetExStyle($1)"},
        {"trigger": "ControlSetTab\t(N [, Control, WinTitle])", "contents": "ControlSetTab($1)"},
        {"trigger": "ControlSetText\t(NewText [, Control, WinTitle])", "contents": "ControlSetText($1)"},
        {"trigger": "ControlShow\t([Control, WinTitle])t", "contents": "ControlShow($1)"},
        {"trigger": "ControlShowDropDown\t([Control, WinTitle])", "contents": "ControlShowDropDown($1)"},
        {"trigger": "SetControlDelay\t(Delay)", "contents": "SetControlDelay($1)"},


        // ############################################################################################################################################
        // # Maths                                                                                                                                    #
        // ############################################################################################################################################
        {"trigger": "Between\t(Number, Low, High)", "contents": "(${1:Number} >= ${2:Low} && $1 <= ${3:High})"},
        {"trigger": "Floor\t(Number)", "contents": "Floor($1)"},
        {"trigger": "Format\t(FormatStr [, Values...])", "contents": "Format($1)"},
        {"trigger": "Random\t([Min, Max])", "contents": "Random($1)"},
        {"trigger": "Round\t(Number [, N])", "contents": "Round(${1:Number})"},
        {"trigger": "Ceil\t(Number)", "contents": "Ceil($1)"},
        {"trigger": "Abs\t(Number)", "contents": "Abs($1)"},
        {"trigger": "Cos\t(Number)", "contents": "Cos($1)"},
        {"trigger": "ASin\t(Number)", "contents": "ASin($1)"},
        {"trigger": "ACos\t(Number)", "contents": "ACos($1)"},
        {"trigger": "ATan\t(Number)", "contents": "ATan($1)"},
        {"trigger": "ATan2\t(Y, X)", "contents": "DllCall(\"msvcrt.dll\\atan2\", \"Double\", ${1:Y}, \"Double\", ${2:X}, \"Cdecl Double\")"},
        {"trigger": "DateAdd\t(DateTime, Time, TimeUnits)", "contents": "DateAdd(${1:DateTime}, ${2:Time}, ${3:TimeUnits})"},
        {"trigger": "DateDiff\t(DateTime1, DateTime2, TimeUnits)", "contents": "DateDiff(${1:DateTime1}, ${2:DateTime2}, ${3:TimeUnits})"},
        {"trigger": "Mod\t(Number)", "contents": "Mod($1)"},
        {"trigger": "Sqrt\t(Number)", "contents": "Sqrt($1)"},
        {"trigger": "Exp\t(Number)", "contents": "Exp($1)"},
        {"trigger": "Log\t(Number)", "contents": "Log($1)"},
        {"trigger": "Ln\t(Number)", "contents": "Ln($1)"},
        {"trigger": "Sin\t(Number)", "contents": "Sin($1)"},
        {"trigger": "Max\t(Number1 [, Number2, ...])", "contents": "Max($1)"},
        {"trigger": "Min\t(Number1 [, Number2, ...])", "contents": "Min($1)"},
        {"trigger": "Float\t(Value)", "contents": "Float(${1:Value})"},
        {"trigger": "Integer\t(Value)", "contents": "Integer(${1:Value})"},
        {"trigger": "Hex\t(Number)", "contents": "Format(\"{:X}\", ${1:Number})"},


        // ############################################################################################################################################
        // # Mouse and Keyboard                                                                                                                                   #
        // ############################################################################################################################################
        {"trigger": "BlockInput\t(Mode)", "contents": "BlockInput(${1:TRUE})"},
        {"trigger": "Click", "contents": "Click"},
        {"trigger": "ControlClick\t([Control-or-Pos, WinTitle])", "contents": "ControlClick($1)"},
        {"trigger": "ControlSend\t(Keys [, Control, WinTitle])", "contents": "ControlSend($1)"},
        {"trigger": "CoordMode\t(\"ToolTip|Pixel|Mouse|Caret|Menu\" [, \"Screen|Window|Client\"])", "contents": "CoordMode(\"${1:Mode}\", \"${2:Screen}\")"},
        {"trigger": "GetKeyName\t(Key)", "contents": "GetKeyName($1)"},
        {"trigger": "GetKeyVK\t(Key)", "contents": "GetKeyVK($1)"},
        {"trigger": "GetKeySC\t(Key)", "contents": "GetKeySC($1)"},
        {"trigger": "GetKeyState\t(KeyName [, Mode])", "contents": "GetKeyState($1)"},
        {"trigger": "KeyHistory", "contents": "KeyHistory"},
        {"trigger": "KeyWait\t(KeyName [, Options])", "contents": "KeyWait(\"${1:KeyName}\")"},
        {"trigger": "Input\t([Options, EndKeys, MatchList])", "contents": "Input($1)"},
        {"trigger": "MouseClick\t([WhichButton , X, Y, ClickCount, Speed, \"D|U\", \"R\"])", "contents": "MouseClick($1)"},
        {"trigger": "MouseClickDrag\t(WhichButton, X1, Y1, X2, Y2 [, Speed, \"R\"])", "contents": "MouseClickDrag($1)"},
        {"trigger": "MouseGetPos\t([OutputVarX, OutputVarY, OutputVarWin, OutputVarControl, 1|2|3])", "contents": "MouseGetPos(X, Y, W, C, 2$1)"},
        {"trigger": "MouseMove\t(X, Y [, Speed, \"R\"])", "contents": "MouseMove($1)"},
        {"trigger": "Hotkey\t(KeyName|If [, Label|WinTitle|Exp.|FObj, Options])", "contents": "Hotkey($1)"},
        {"trigger": "InputEnd", "contents": "InputEnd"},
        {"trigger": "ListHotkeys", "contents": "ListHotkeys"},
        {"trigger": "Hotstring\t(String [, Replacement, OnOffToggle])", "contents": "Hotstring(${1:String})"},


        // ############################################################################################################################################
        // # Misc.                                                                                                                                    #
        // ############################################################################################################################################
        {"trigger": "FormatTime\t([YYYYMMDDHH24MISS, Format])", "contents": "FormatTime($1)"},
        {"trigger": "Download\t(URL, Filename)", "contents": "Download($1)"},
        {"trigger": "Edit", "contents": "Edit"},
        {"trigger": "Func\t(FunctionName)", "contents": "Func($1)"},
        {"trigger": "Type\t(Value)", "contents": "Type(${1:Value})"},
        {"trigger": "IsByRef\t(UnquotedVarName)", "contents": "IsByRef($1)"},
        {"trigger": "IsFunc\t(FunctionName)", "contents": "IsFunc($1)"},
        {"trigger": "IsLabel\t(LabelName)", "contents": "IsLabel($1)"},
        {"trigger": "IsObject\t(ObjectValue)", "contents": "IsObject($1)"},
        {"trigger": "IsString\t(String)", "contents": "Type(${1:String}) == \"String\""},
        {"trigger": "IsInteger\t(Integer)", "contents": "Type(${1:Integer}) == \"Integer\""},
        {"trigger": "IsFloat\t(Float)", "contents": "Type(${1:Float}) == \"Float\""},
        {"trigger": "IsFile\t(FileName)", "contents": "!DirExist(${1:FileName}) && FileExist($1)"},
        {"trigger": "ListLines\t([\"On|Off\"])", "contents": "ListLines"},
        {"trigger": "ListVars", "contents": "ListVars"},
        {"trigger": "MonitorGet\t([N, Left, Top, Right, Bottom])", "contents": "MonitorGet($1)"},
        {"trigger": "MonitorGetWorkArea\t([N, Left, Top, Right, Bottom])", "contents": "MonitorGetWorkArea($1)"},
        {"trigger": "MonitorGetCount", "contents": "MonitorGetCount()"},
        {"trigger": "MonitorGetPrimary", "contents": "MonitorGetPrimary()"},
        {"trigger": "MonitorGetName\t([N])", "contents": "MonitorGetName($1)"},
        {"trigger": "OutputDebug\t(Tetx)", "contents": "OutputDebug(${1:Text})"},
        {"trigger": "SendMode\t(\"Input|Play|Event|InputThenPlay\")", "contents": "SendMode($1)"},
        {"trigger": "SendInput\t(Keys)", "contents": "SendInput(${1:Keys})"},
        {"trigger": "SendPlay\t(Keys)", "contents": "SendPlay(${1:Keys})"},
        {"trigger": "SendEvent\t(Keys)", "contents": "SendEvent(${1:Keys})"},
        {"trigger": "SendLevel\t(Level)", "contents": "SendLevel($1)"},
        {"trigger": "SetDefaultMouseSpeed\t(Speed)", "contents": "SetDefaultMouseSpeed($1)"},
        {"trigger": "SetKeyDelay\t([Delay, PressDuration, \"Play\"])", "contents": "SetKeyDelay($1)"},
        {"trigger": "SetMouseDelay\t(Delay [, \"Play\"])", "contents": "SetMouseDelay($1)"},
        {"trigger": "SetStoreCapslockMode\t(true/false)", "contents": "SetStoreCapslockMode(${1:true})"},
        {"trigger": "SetCapsLockState\t(State)", "contents": "SetCapsLockState($1)"},
        {"trigger": "SetNumLockState\t(State)", "contents": "SetNumLockState($1)"},
        {"trigger": "SetScrollLockState\t(State)", "contents": "SetScrollLockState($1)"},
        {"trigger": "Address", "contents": "Address"},
        {"trigger": "IL_Add\t(ImageListID, Filename [, IconNumber, ResizeNonIcon])", "contents": "IL_Add(${1:ImageListID}, ${2:Filename})"},
        {"trigger": "IL_Create\t([InitialCount, GrowCount, LargeIcons])", "contents": "IL_Create($1)"},
        {"trigger": "IL_Destroy\t(ImageListID)", "contents": "IL_Destroy(${1:ImageListID})"},


        // ############################################################################################################################################
        // # Objects                                                                                                                                  #
        // ############################################################################################################################################
        {"trigger": "__Call\t(Name [, Params...])", "contents": "__Call(Name, Params*)\n{\n\t;$1\n}"},
        {"trigger": "__Set\t([Key, Key2, ...], Value)", "contents": "__Set(Key*)\n{\n\t;$1\n}"},
        {"trigger": "__Get\t([Key, Key2, ...])", "contents": "__Get(Key*)\n{\n\t;$1\n}"},
        {"trigger": "__Delete", "contents": "__Delete()\n{\n\t;$1\n}"},
        {"trigger": "__New\t([Params])", "contents": "__New($1)\n{\n\t;\n}"},
        {"trigger": "New\tClass()", "contents": "New ${1:ClassName}"},
        {"trigger": "extends\tBaseClassName", "contents": "extends ${1:BaseClassName}"},
        {"trigger": "Class\tClassName [extends BaseClassName]", "contents": "Class ${1:ClassName}\n{\n\t;$2\n}"},
        {"trigger": "ObjAddRef\t(Ptr)", "contents": "ObjAddRef($1)"},
        {"trigger": "ObjBindMethod\t(Obj, Method, Params)", "contents": "ObjBindMethod(${1:Obj}, Method, Params)"},
        {"trigger": "ObjClone\t(Object)", "contents": "ObjClone(${1:Object})"},
        {"trigger": "ObjDelete\t(Object)", "contents": "ObjDelete(${1:Object})"},
        {"trigger": "ObjGetAddress\t(Object, Key)", "contents": "ObjGetAddress(${1:Object}, ${2:Key})"},
        {"trigger": "ObjGetCapacity\t(Object [, Key])", "contents": "ObjGetCapacity(${1:Object})"},
        {"trigger": "ObjHasKey\t(Object, Key)", "contents": "ObjHasKey(${1:Object}, Key)"},
        {"trigger": "ObjInsertAt\t(Object, Pos, Value1 [, Value2, ... ValueN])", "contents": "ObjInsertAt(${1:Object}, Pos, Value1)"},
        {"trigger": "ObjLength\t(Object)", "contents": "ObjLength(${1:Object})"},
        {"trigger": "ObjMaxIndex\t(Object)", "contents": "ObjMaxIndex(${1:Object})"},
        {"trigger": "ObjMinIndex\t(Object)", "contents": "ObjMinIndex(${1:Object})"},
        {"trigger": "ObjNewEnum\t(Object)", "contents": "ObjNewEnum(${1:Object})"},
        {"trigger": "ObjPop\t(Object)", "contents": "ObjPop(${1:Object})"},
        {"trigger": "ObjPush\t(Object, [ Value, Value2, ..., ValueN ])", "contents": "ObjPush(${1:Object})"},
        {"trigger": "ObjRawSet\t(Object, Key, Value)", "contents": "ObjRawSet(${1:Object}, Key, Value)"},
        {"trigger": "ObjGetBase\t(Obj)", "contents": "ObjGetBase(${1:Obj})"},
        {"trigger": "ObjSetBase\t(Obj, BaseObj)", "contents": "ObjSetBase(${1:Object}, ${2:BaseObj})"},
        {"trigger": "ObjRelease\t(Ptr)", "contents": "ObjRelease($1)"},
        {"trigger": "ObjRemoveAt\t(Object, Pos [, Length])", "contents": "ObjRemoveAt(${1:Object}, Pos)"},
        {"trigger": "ObjSetCapacity\t(Object, MaxItems|Key, ByteSize)", "contents": "ObjSetCapacity(${1:Object}, ${2:MaxItems})"},
        {"trigger": "Object\t(Address)", "contents": "Object(${1:Address})"},
        {"trigger": "ObjectKV\t{Key: Value, ...}", "contents": "{${1:Key}: ${2:Value}}"},
        {"trigger": "Array\t[Value1, ...]", "contents": "[$1]"},
        {"trigger": "this", "contents": "This"},
        {"trigger": "base", "contents": "base"},
        {"trigger": "value", "contents": "Value"},


        // ############################################################################################################################################
        // # Process                                                                                                                                  #
        // ############################################################################################################################################
        {"trigger": "ProcessClose\t(PID-or-Name)", "contents": "ProcessClose($1)"},
        {"trigger": "ProcessExist\t([PID-or-Name])", "contents": "ProcessExist($1)"},
        {"trigger": "ProcessSetPriority\t(Priority [, PID-or-Name])", "contents": "ProcessSetPriority(\"Normal\", ${1:PID})"},
        {"trigger": "ProcessWait\t(PID-or-Name [, Timeout])", "contents": "ProcessWait($1)"},
        {"trigger": "ProcessWaitClose\t(PID-or-Name [, Timeout])", "contents": "ProcessWaitClose($1)"},
        {"trigger": "Shutdown\t(Code)", "contents": "Shutdown(${1:Code})"},
        {"trigger": "Run\t(Target [, WorkingDir, \"Max|Min|Hide|UseErrorLevel\", OutputVarPID])", "contents": "Run(${1:Target},,, OutputVarPID)"},
        {"trigger": "RunAs\t([User, Password, Domain])", "contents": "RunAs($1)"},
        {"trigger": "RunWait\t(Target [, WorkingDir, Options, OutputVarPID])", "contents": "RunWait(${1:Target},,, OutputVarPID)"},


        // ############################################################################################################################################
        // # Registry                                                                                                                                 #
        // ############################################################################################################################################
        {"trigger": "RegDelete\t([KeyName, ValueName])", "contents": "RegDelete($1)"},
        {"trigger": "RegDeleteKey\t([KeyName])", "contents": "RegDeleteKey($1)"},
        {"trigger": "RegRead\t([KeyName, ValueName])", "contents": "RegRead($1)"},
        {"trigger": "RegWrite\t(Value, ValueType, KeyName [, ValueName])", "contents": "RegWrite(${1:Value})"},
        {"trigger": "SetRegView\t(RegView)", "contents": "SetRegView(${1:32})"},
        {"trigger": "Loop Reg\t(KeyName [, Mode = \"KV\"])", "contents": "Loop Reg, ${1:KeyName}"},
        {"trigger": "HKEY_CLASSES_ROOT\t#80000000", "contents": "HKEY_CLASSES_ROOT"},
        {"trigger": "HKCR\t#80000000", "contents": "HKCR"},
        {"trigger": "HKEY_CURRENT_CONFIG\t#80000005", "contents": "HKEY_CURRENT_CONFIG"},
        {"trigger": "HKCC\t#80000005", "contents": "HKCC"},
        {"trigger": "HKEY_CURRENT_USER\t#80000001", "contents": "HKEY_CURRENT_USER"},
        {"trigger": "HKCU\t#80000001", "contents": "HKCU"},
        {"trigger": "HKEY_LOCAL_MACHINE\t#80000002", "contents": "HKEY_LOCAL_MACHINE"},
        {"trigger": "HKLM\t#80000002", "contents": "HKLM"},
        {"trigger": "HKEY_USERS\t#80000003", "contents": "HKEY_USERS"},
        {"trigger": "HKU\t#80000003", "contents": "HKU"},
        {"trigger": "RegCloseKey\t(hKey)", "contents": "DllCall(\"Advapi32.dll\\RegCloseKey\", \"Ptr\", ${1:hKey})"},


        // ############################################################################################################################################
        // # Screen                                                                                                                                   #
        // ############################################################################################################################################
        {"trigger": "PixelGetColor\t(X, Y [, \"Alt|Slow\"])", "contents": "PixelGetColor(X, Y, \"Slow\"$1)"},
        {"trigger": "PixelSearch\t(OutX, OutY, X1, Y1, X2, Y2, ColorID [, Variation, \"Fast\"])", "contents": "PixelSearch(X, Y, X1, Y1, X2, Y2, ${1:ColorID})"},
        {"trigger": "ImageSearch\t(OutX, OutY, X1, Y1, X2, Y2, ImageFile)", "contents": "ImageSearch(X, Y, X1, Y1, X2, Y2, ${1:ImageFile})"},


        // ############################################################################################################################################
        // # Sound                                                                                                                                    #
        // ############################################################################################################################################
        {"trigger": "SoundBeep\t([Frequency, Duration])", "contents": "SoundBeep($1)"},
        {"trigger": "SoundGet\t([ComponentType, ControlType, DeviceNumber])", "contents": "SoundGet($1)"},
        {"trigger": "SoundPlay\t(Filename [, wait])", "contents": "SoundPlay(${1:Filename})"},
        {"trigger": "SoundSet\t(NewSetting [, ComponentType, ControlType, DeviceNumber])", "contents": "SoundSet(${1:NewSetting})"},


        // ############################################################################################################################################
        // # String                                                                                                                                   #
        // ############################################################################################################################################
        {"trigger": "Loop Parse\t(String [, Delimiters, OmitChars])", "contents": "Loop Parse, ${1:String}"},
        {"trigger": "Chr\t(Number)", "contents": "Chr($1)"},
        {"trigger": "RegExMatch\t(Haystack, Needle [, OutVar, StartPos])", "contents": "RegExMatch(${1:Haystack}, ${2:NeedleRegEx})"},
        {"trigger": "RegExReplace\t(Haystack, Needle [, Replacement, OutCount, Limit, StartPos])", "contents": "RegExReplace(${1:Haystack}, ${2:NeedleRegEx})"},
        {"trigger": "Sort\t(String [, Options])", "contents": "Sort(${1:String})"},
        {"trigger": "Trim\t(String [, OmitChars := \"`t\"])", "contents": "Trim(${1:String})"},
        {"trigger": "LTrim\t(String [, OmitChars := \"`t\"])", "contents": "LTrim(${1:String})"},
        {"trigger": "RTrim\t(String [, OmitChars := \"`t\"])", "contents": "RTrim(${1:String})"},
        {"trigger": "StrLen\t(String)", "contents": "StrLen(${1:String})"},
        {"trigger": "StrLower\t(String)", "contents": "Format(\"{:L}\", ${1:String})"},
        {"trigger": "StrReplace\t(Haystack, SearchText , ReplaceText, OutCount, Limit)", "contents": "StrReplace(${1:Haystack}, ${2:SearchText})"},
        {"trigger": "StrSplit\t(String [, Delimiters, OmitChars])", "contents": "StrSplit(${1:String})"},
        {"trigger": "StrUpper\t(String)", "contents": "Format(\"{:U}\", ${1:String})"},
        {"trigger": "SubStr\t(String, StartingPos [, Length])", "contents": "SubStr(${1:String}, ${2:StartingPos})"},
        {"trigger": "InStr\t(Haystack, Needle [, CaseSensitive := false, StartingPos := 1, Occurrence := 1])", "contents": "InStr(${1:Haystack}, ${2:Needle})"},
        {"trigger": "String\t(Value)", "contents": "String(${1:Value})"},


        // ############################################################################################################################################
        // # Window                                                                                                                                   #
        // ############################################################################################################################################
        {"trigger": "MenuSelect\t(WinTitle, WinText, Menu [, SubMenu1~6])", "contents": "MenuSelect($1)"},
        {"trigger": "SendMessage\t(Msg [, wParam, lParam, Control, WinTitle,,,, Timeout])", "contents": "SendMessage(${1:Msg}, 0, 0,, WinTitle)"},
        {"trigger": "SendMessage_DllCall\t(Msg, hWnd [, wParam, lParam, ReturnType])", "contents": "DllCall(\"User32.dll\\SendMessageW\", \"Ptr\", ${1:hWnd}, \"UInt\", Msg, \"Ptr\", 0, \"Ptr\", 0)"},
        {"trigger": "PostMessage\t(Msg [, wParam, lParam, Control, WinTitle)", "contents": "PostMessage(${1:Msg}, 0, 0,, WinTitle)"},
        {"trigger": "PostMessage_DllCall\t(Msg, hWnd [, wParam, lParam, ReturnType])", "contents": "DllCall(\"User32.dll\\PostMessageW\", \"Ptr\", ${1:hWnd}, \"UInt\", Msg, \"Ptr\", 0, \"Ptr\", 0)"},
        {"trigger": "GroupActivate\t(GroupName [, \"R\"])", "contents": "GroupActivate($1)"},
        {"trigger": "GroupAdd\t(GroupName [, WinTitle])", "contents": "GroupAdd($1)"},
        {"trigger": "GroupClose\t(GroupName [, \"A|R\"])", "contents": "GroupClose($1)"},
        {"trigger": "GroupDeactivate\t(GroupName [, \"R\"])", "contents": "GroupDeactivate($1)"},
        {"trigger": "DetectHiddenText\t(\"On|Off\")", "contents": "DetectHiddenText(\"${1:On}\")"},
        {"trigger": "DetectHiddenWindows\t(\"On|Off\")", "contents": "DetectHiddenWindows(\"${1:On}\")"},
        {"trigger": "SetTitleMatchMode\t(MatchMode|\"Fast|Slow\")", "contents": "SetTitleMatchMode(${1:2})"},
        {"trigger": "SetWinDelay\t(Delay)", "contents": "SetWinDelay($1)"},
        {"trigger": "WinActivate\t([WinTitle, WinText)", "contents": "WinActivate($1)"},
        {"trigger": "WinActivateBottom\t([WinTitle])", "contents": "WinActivateBottom($1)"},
        {"trigger": "WinActive\t([WinTitle])", "contents": "WinActive($1)"},
        {"trigger": "WinClose\t([WinTitle])", "contents": "WinClose($1)"},
        {"trigger": "WinExist\t([WinTitle])", "contents": "WinExist($1)"},
        {"trigger": "WinGetClass\t([WinTitle])", "contents": "WinGetClass($1)"},
        {"trigger": "WinGetControls\t([WinTitle])", "contents": "WinGetControls($1)"},
        {"trigger": "WinGetControlsHwnd\t([WinTitle])", "contents": "WinGetControlsHwnd($1)"},
        {"trigger": "WinGetCount", "contents": "WinGetCount($1)"},
        {"trigger": "WinGetStyle\t([WinTitle])", "contents": "WinGetStyle($1)"},
        {"trigger": "WinGetID\t([WinTitle])", "contents": "WinGetID($1)"},
        {"trigger": "WinGetIDLast\t([WinTitle])", "contents": "WinGetIDLast($1)"},
        {"trigger": "WinGetList\t([WinTitle])", "contents": "WinGetList($1)"},
        {"trigger": "WinGetMinMax\t([WinTitle])", "contents": "WinGetMinMax($1)"},
        {"trigger": "WinGetPID\t([WinTitle])", "contents": "WinGetPID($1)"},
        {"trigger": "WinGetProcessName\t([WinTitle])", "contents": "WinGetProcessName($1)"},
        {"trigger": "WinGetProcessPath\t([WinTitle])", "contents": "WinGetProcessPath($1)"},
        {"trigger": "WinGetPos\t([X, Y, Width, Height, WinTitle])", "contents": "WinGetPos(X, Y, W, H, ${1:WinTitle})"},
        {"trigger": "WinGetClientPos\t([X, Y, Width, Height, WinTitle])", "contents": "WinGetClientPos(X, Y, W, H, ${1:WinTitle})"},
        {"trigger": "WinGetExStyle\t([WinTitle])", "contents": "WinGetExStyle($1)"},
        {"trigger": "WinGetText\t([WinTitle])", "contents": "WinGetText($1)"},
        {"trigger": "WinGetTitle\t([WinTitle])", "contents": "WinGetTitle($1)"},
        {"trigger": "WinGetTransColor\t([WinTitle])", "contents": "WinGetTransColor($1)"},
        {"trigger": "WinGetTransparent\t([WinTitle])", "contents": "WinGetTransparent($1)"},
        {"trigger": "WinHide\t([WinTitle])", "contents": "WinHide($1)"},
        {"trigger": "WinKill\t([WinTitle])", "contents": "WinKill($1)"},
        {"trigger": "WinMaximize\t([WinTitle])", "contents": "WinMaximize($1)"},
        {"trigger": "WinMinimize\t([WinTitle])", "contents": "WinMinimize($1)"},
        {"trigger": "WinMinimizeAll", "contents": "WinMinimizeAll"},
        {"trigger": "WinMinimizeAllUndo", "contents": "WinMinimizeAllUndo"},
        {"trigger": "WinMove\t(X, Y [, Width, Height, WinTitle)", "contents": "WinMove(X, Y, W, H, ${1:WinTitle})"},
        {"trigger": "WinMoveBottom\t([WinTitle])", "contents": "WinMoveBottom($1)"},
        {"trigger": "WinMoveTop\t([WinTitle])", "contents": "WinMoveTop($1)"},
        {"trigger": "WinRedraw\t([WinTitle])", "contents": "WinRedraw($1)"},
        {"trigger": "WinRestore\t([WinTitle])", "contents": "WinRestore($1)"},
        {"trigger": "WinSetAlwaysOnTop\t([Value, WinTitle])", "contents": "WinSetAlwaysOnTop($1)"},
        {"trigger": "WinSetEnabled\t([Value, WinTitle])", "contents": "WinSetEnabled($1)"},
        {"trigger": "WinSetStyle\t([Value, WinTitle])", "contents": "WinSetStyle($1)"},
        {"trigger": "WinSetRegion\t([Options, WinTitle])", "contents": "WinSetRegion($1)"},
        {"trigger": "WinSetTitle\t(NewTitle [, WinTitle])", "contents": "WinSetTitle(${1:NewTitle})"},
        {"trigger": "WinSetTransColor\t(Color [N] [, Options, WinTitle)", "contents": "WinSetTransColor(${1:Color N})"},
        {"trigger": "WinSetTransparent\t([N, WinTitle])", "contents": "WinSetTransparent($1)"},
        {"trigger": "WinShow\t([WinTitle])", "contents": "WinShow($1)"},
        {"trigger": "WinWait\t([WinTitle, WinText, Seconds])", "contents": "WinWait($1)"},
        {"trigger": "WinWaitActive\t([WinTitle])", "contents": "WinWaitActive($1)"},
        {"trigger": "WinWaitClose\t([WinTitle])", "contents": "WinWaitClose($1)"},
        {"trigger": "WinWaitNotActive\t([WinTitle, WinText, Seconds])", "contents": "WinWaitNotActive($1)"},
        {"trigger": "ahk_id", "contents": "\"ahk_id\" . "},


        // ############################################################################################################################################
        // # Directives                                                                                                                               #
        // ############################################################################################################################################
        {"trigger": "#ClipboardTimeout\tMilliseconds = 1000", "contents": "#ClipboardTimeout ${1:Milliseconds}"},
        {"trigger": "#ErrorStdOut", "contents": "#ErrorStdOut"},
        {"trigger": "#HotkeyInterval\tMilliseconds", "contents": "#HotkeyInterval ${1:Milliseconds}"},
        {"trigger": "#HotkeyModifierTimeout\tMilliseconds", "contents": "#HotkeyModifierTimeout ${1:Milliseconds}"},
        {"trigger": "#Hotstring\tNoMouse|EndChars NewChars|NewOptions", "contents": "#Hotstring ${1:Option}"},
        {"trigger": "#If\t(Expression)", "contents": "#If (${1:Expression})"},
        {"trigger": "#IfTimeout\tTimeout", "contents": "#IfTimeout ${1:Timeout}"},
        {"trigger": "#IfWinActive\t(WinTitle)", "contents": "#If WinActive(${1:WinTitle})"},
        {"trigger": "#IfWinExist\t(WinTitle)", "contents": "#If WinExist(${1:WinTitle})"},
        {"trigger": "#Include\tFileOrDirName|<LibName>", "contents": "#Include ${1:FileOrDirName}"},
        {"trigger": "#IncludeAgain\tFileOrDirName", "contents": "#IncludeAgain ${1:FileOrDirName}"},
        {"trigger": "#InputLevel\t[Level]", "contents": "#InputLevel ${1:Level})"},
        {"trigger": "#InstallKeybdHook", "contents": "#InstallKeybdHook"},
        {"trigger": "#InstallMouseHook", "contents": "#InstallMouseHook"},
        {"trigger": "#KeyHistory\tMaxEvents", "contents": "#KeyHistory ${1:MaxEvents}"},
        {"trigger": "#MaxHotkeysPerInterval\tValue", "contents": "#MaxHotkeysPerInterval ${1:Value}"},
        {"trigger": "#MaxThreads\tValue", "contents": "#MaxThreads ${1:Value}"},
        {"trigger": "#MaxThreadsBuffer\tOn|Off", "contents": "#MaxThreadsBuffer ${1:On}"},
        {"trigger": "#MaxThreadsPerHotkey\tValue", "contents": "#MaxThreadsPerHotkey ${1:Value}"},
        {"trigger": "#MenuMaskKey\tKeyName", "contents": "#MenuMaskKey ${1:KeyName}"},
        {"trigger": "#NoTrayIcon", "contents": "#NoTrayIcon"},
        {"trigger": "#Persistent", "contents": "#Persistent"},
        {"trigger": "#SingleInstance\tForce|Ignore|Off", "contents": "#SingleInstance ${1:Force}"},
        {"trigger": "#UseHook\tOn|Off", "contents": "#UseHook ${1:On}"},
        {"trigger": "#Warn\t[WarningType, WarningMode]", "contents": "#Warn"},
        {"trigger": "#WinActivateForce", "contents": "#WinActivateForce"},
        {"trigger": "#SuspendExempt\t[Exempt = *TRUE/FALSE]", "contents": "#SuspendExempt"},


        // ############################################################################################################################################
        // # Built-in Variables                                                                                                                       #
        // ############################################################################################################################################
        {"trigger": "A_Space", "contents": "A_Space"},
        {"trigger": "A_Tab", "contents": "A_Tab"},
        {"trigger": "A_Args", "contents": "A_Args"},
        {"trigger": "A_WorkingDir", "contents": "A_WorkingDir"},
        {"trigger": "A_InitialWorkingDir", "contents": "A_InitialWorkingDir"},
        {"trigger": "A_ScriptDir", "contents": "A_ScriptDir"},
        {"trigger": "A_ScriptName", "contents": "A_ScriptName"},
        {"trigger": "A_ScriptFullPath", "contents": "A_ScriptFullPath"},
        {"trigger": "A_ScriptHwnd", "contents": "A_ScriptHwnd"},
        {"trigger": "A_LineNumber", "contents": "A_LineNumber"},
        {"trigger": "A_LineFile", "contents": "A_LineFile"},
        {"trigger": "A_ThisFunc", "contents": "A_ThisFunc"},
        {"trigger": "A_ThisLabel", "contents": "A_ThisLabel"},
        {"trigger": "A_AhkVersion", "contents": "A_AhkVersion"},
        {"trigger": "A_AhkPath", "contents": "A_AhkPath"},
        {"trigger": "A_AhkDir", "contents": "SubStr(A_AhkPath, 1, InStr(A_AhkPath, \"\\\",, -1)-1)"},
        {"trigger": "A_IsCompiled", "contents": "A_IsCompiled"},
        {"trigger": "A_YYYY", "contents": "A_YYYY"},
        {"trigger": "A_MM", "contents": "A_MM"},
        {"trigger": "A_DD", "contents": "A_DD"},
        {"trigger": "A_MMMM", "contents": "A_MMMM"},
        {"trigger": "A_MMM", "contents": "A_MMM"},
        {"trigger": "A_DDDD", "contents": "A_DDDD"},
        {"trigger": "A_DDD", "contents": "A_DDD"},
        {"trigger": "A_WDay", "contents": "A_WDay"},
        {"trigger": "A_YDay", "contents": "A_YDay"},
        {"trigger": "A_YWeek", "contents": "A_YWeek"},
        {"trigger": "A_Hour", "contents": "A_Hour"},
        {"trigger": "A_Min", "contents": "A_Min"},
        {"trigger": "A_Sec", "contents": "A_Sec"},
        {"trigger": "A_MSec", "contents": "A_MSec"},
        {"trigger": "A_Now", "contents": "A_Now"},
        {"trigger": "A_NowUTC", "contents": "A_NowUTC"},
        {"trigger": "A_TickCount", "contents": "A_TickCount"},
        {"trigger": "A_IsSuspended", "contents": "A_IsSuspended"},
        {"trigger": "A_IsPaused", "contents": "A_IsPaused"},
        {"trigger": "A_IsCritical", "contents": "A_IsCritical"},
        {"trigger": "A_TitleMatchMode", "contents": "A_TitleMatchMode"},
        {"trigger": "A_TitleMatchModeSpeed", "contents": "A_TitleMatchModeSpeed"},
        {"trigger": "A_DetectHiddenWindows", "contents": "A_DetectHiddenWindows"},
        {"trigger": "A_DetectHiddenText", "contents": "A_DetectHiddenText"},
        {"trigger": "A_StringCaseSense", "contents": "A_StringCaseSense"},
        {"trigger": "A_FileEncoding", "contents": "A_FileEncoding"},
        {"trigger": "A_SendMode", "contents": "A_SendMode"},
        {"trigger": "A_SendLevel", "contents": "A_SendLevel"},
        {"trigger": "A_StoreCapslockMode", "contents": "A_StoreCapslockMode"},
        {"trigger": "A_KeyDelay", "contents": "A_KeyDelay"},
        {"trigger": "A_KeyDuration", "contents": "A_KeyDuration"},
        {"trigger": "A_KeyDelayPlay", "contents": "A_KeyDelayPlay"},
        {"trigger": "A_KeyDurationPlay", "contents": "A_KeyDurationPlay"},
        {"trigger": "A_WinDelay", "contents": "A_WinDelay"},
        {"trigger": "A_ControlDelay", "contents": "A_ControlDelay"},
        {"trigger": "A_MouseDelay", "contents": "A_MouseDelay"},
        {"trigger": "A_MouseDelayPlay", "contents": "A_MouseDelayPlay"},
        {"trigger": "A_DefaultMouseSpeed", "contents": "A_DefaultMouseSpeed"},
        {"trigger": "A_CoordModeToolTip", "contents": "A_CoordModeToolTip"},
        {"trigger": "A_CoordModePixel", "contents": "A_CoordModePixel"},
        {"trigger": "A_CoordModeMouse", "contents": "A_CoordModeMouse"},
        {"trigger": "A_CoordModeCaret", "contents": "A_CoordModeCaret"},
        {"trigger": "A_CoordModeMenu", "contents": "A_CoordModeMenu"},
        {"trigger": "A_RegView", "contents": "A_RegView"},
        {"trigger": "A_IconHidden", "contents": "A_IconHidden"},
        {"trigger": "A_IconTip", "contents": "A_IconTip"},
        {"trigger": "A_IconFile", "contents": "A_IconFile"},
        {"trigger": "A_IconNumber", "contents": "A_IconNumber"},
        {"trigger": "A_TimeIdle", "contents": "A_TimeIdle"},
        {"trigger": "A_TimeIdlePhysical", "contents": "A_TimeIdlePhysical"},
        {"trigger": "A_ThisHotkey", "contents": "A_ThisHotkey"},
        {"trigger": "A_PriorHotkey", "contents": "A_PriorHotkey"},
        {"trigger": "A_PriorKey", "contents": "A_PriorKey"},
        {"trigger": "A_TimeSinceThisHotkey", "contents": "A_TimeSinceThisHotkey"},
        {"trigger": "A_TimeSincePriorHotkey", "contents": "A_TimeSincePriorHotkey"},
        {"trigger": "A_EndChar", "contents": "A_EndChar"},
        {"trigger": "A_ComSpec", "contents": "A_ComSpec"},
        {"trigger": "A_Temp", "contents": "A_Temp"},
        {"trigger": "A_OSVersion", "contents": "A_OSVersion"},
        {"trigger": "A_Is64bitOS", "contents": "A_Is64bitOS"},
        {"trigger": "A_PtrSize", "contents": "A_PtrSize"},
        {"trigger": "A_Language", "contents": "A_Language"},
        {"trigger": "A_ComputerName", "contents": "A_ComputerName"},
        {"trigger": "A_UserName", "contents": "A_UserName"},
        {"trigger": "A_WinDir", "contents": "A_WinDir"},
        {"trigger": "A_ProgramFiles", "contents": "A_ProgramFiles"},
        {"trigger": "A_AppData", "contents": "A_AppData"},
        {"trigger": "A_AppDataCommon", "contents": "A_AppDataCommon"},
        {"trigger": "A_Desktop", "contents": "A_Desktop"},
        {"trigger": "A_DesktopCommon", "contents": "A_DesktopCommon"},
        {"trigger": "A_StartMenu", "contents": "A_StartMenu"},
        {"trigger": "A_StartMenuCommon", "contents": "A_StartMenuCommon"},
        {"trigger": "A_Programs", "contents": "A_Programs"},
        {"trigger": "A_ProgramsCommon", "contents": "A_ProgramsCommon"},
        {"trigger": "A_Startup", "contents": "A_Startup"},
        {"trigger": "A_StartupCommon", "contents": "A_StartupCommon"},
        {"trigger": "A_MyDocuments", "contents": "A_MyDocuments"},
        {"trigger": "A_IsAdmin", "contents": "A_IsAdmin"},
        {"trigger": "A_ScreenWidth", "contents": "A_ScreenWidth"},
        {"trigger": "A_ScreenHeight", "contents": "A_ScreenHeight"},
        {"trigger": "A_ScreenDPI", "contents": "A_ScreenDPI"},
        {"trigger": "A_IPAddress1", "contents": "A_IPAddress1"},
        {"trigger": "A_IPAddress2", "contents": "A_IPAddress2"},
        {"trigger": "A_IPAddress3", "contents": "A_IPAddress3"},
        {"trigger": "A_IPAddress4", "contents": "A_IPAddress4"},
        {"trigger": "A_Cursor", "contents": "A_Cursor"},
        {"trigger": "A_CaretX", "contents": "A_CaretX"},
        {"trigger": "A_CaretY", "contents": "A_CaretY"},
        {"trigger": "A_EventInfo", "contents": "A_EventInfo"},
        {"trigger": "Clipboard", "contents": "Clipboard"},
        {"trigger": "ClipboardAll\t([Data, Size])", "contents": "ClipboardAll($1)"},
        {"trigger": "ErrorLevel", "contents": "ErrorLevel"},
        {"trigger": "A_LastError", "contents": "A_LastError"},
        {"trigger": "A_Index", "contents": "A_Index"},
        {"trigger": "A_LoopFileName", "contents": "A_LoopFileName"},
        {"trigger": "A_LoopFileExt", "contents": "A_LoopFileExt"},
        {"trigger": "A_LoopFilePath", "contents": "A_LoopFilePath"},
        {"trigger": "A_LoopFileFullPath", "contents": "A_LoopFileFullPath"},
        {"trigger": "A_LoopFileShortPath", "contents": "A_LoopFileShortPath"},
        {"trigger": "A_LoopFileShortName", "contents": "A_LoopFileShortName"},
        {"trigger": "A_LoopFileDir", "contents": "A_LoopFileDir"},
        {"trigger": "A_LoopFileTimeModified", "contents": "A_LoopFileTimeModified"},
        {"trigger": "A_LoopFileTimeCreated", "contents": "A_LoopFileTimeCreated"},
        {"trigger": "A_LoopFileTimeAccessed", "contents": "A_LoopFileTimeAccessed"},
        {"trigger": "A_LoopFileAttrib", "contents": "A_LoopFileAttrib"},
        {"trigger": "A_LoopFileSize", "contents": "A_LoopFileSize"},
        {"trigger": "A_LoopFileSizeKB", "contents": "A_LoopFileSizeKB"},
        {"trigger": "A_LoopFileSizeMB", "contents": "A_LoopFileSizeMB"},
        {"trigger": "A_LoopRegName", "contents": "A_LoopRegName"},
        {"trigger": "A_LoopRegType", "contents": "A_LoopRegType"},
        {"trigger": "A_LoopRegKey", "contents": "A_LoopRegKey"},
        {"trigger": "A_LoopRegTimeModified", "contents": "A_LoopRegTimeModified"},
        {"trigger": "A_LoopReadLine", "contents": "A_LoopReadLine"},
        {"trigger": "A_LoopField", "contents": "A_LoopField"},
        {"trigger": "true\t1", "contents": "true"},
        {"trigger": "false\t0", "contents": "false"},
        {"trigger": "TRUE\t1", "contents": "TRUE"},
        {"trigger": "FALSE\t0", "contents": "FALSE"},
        {"trigger": "A_Quote\t\"", "contents": "Chr(34)"},
        {"trigger": "A_TrayMenu", "contents": "A_TrayMenu"},
        {"trigger": "A_AllowMainWindow\tRead/write", "contents": "A_AllowMainWindow"},
    ]
}
